/// <reference types="node" />
import { JsonObject } from '@angular-devkit/core';
import { ExecSyncOptions } from 'child_process';
export declare const exec: (command: string, options?: ExecSyncOptions | undefined) => Buffer;
export declare const run: (command: string) => void;
export declare const getPackageJson: (root: string) => {
    [key: string]: any;
} | null;
export declare const updatePackageJson: (root: string, obj: {
    [key: string]: any;
}) => any;
export declare const validatePackageJsonLicense: (root: string, { pkgJson, license }: {
    pkgJson: any;
    license: string;
}) => boolean;
export declare const validatePackageJsonName: (root: string, { pkgJson, name }: {
    pkgJson: any;
    name: string;
}) => boolean;
export declare const validatePackageJsonVersion: (root: string, { pkgJson, version }: {
    pkgJson: any;
    version: string;
}) => boolean;
export declare const updatePackageJsonLicense: (root: string, { license }: {
    license: string;
}) => boolean;
export declare const updatePackageJsonVersion: (root: string, { version }: {
    version: string;
}) => boolean;
export declare const updatePackageJsonName: (root: string, { name }: {
    name: string;
}) => boolean;
export declare const validatePackageJson: (root: string, { dryRun, fix, name, version, workspacePkgJson, }: {
    dryRun: boolean;
    fix: boolean;
    name: string;
    version: string;
    workspacePkgJson: any;
}) => boolean;
export interface NpmPublishOptions {
    dryRun: boolean;
    pkgFiles: string[];
    version: string;
    local?: boolean;
    localUrl?: string;
    tag: 'next' | 'latest';
}
export declare const runNpmPublish: ({ dryRun, pkgFiles, version, tag, local, localUrl, }: NpmPublishOptions) => boolean;
export interface ReleaseItOptions {
    ci: boolean;
    dryRun: boolean;
    pkgFiles: string[];
    preRelease: boolean;
    version: string;
}
export declare const runReleaseIt: ({ ci, dryRun, preRelease, version, }: ReleaseItOptions) => Promise<boolean>;
export declare const selectFromList: (choices: any[], { addBack, addExit, message, }: {
    addBack?: boolean | undefined;
    addExit?: boolean | undefined;
    message?: string | undefined;
}) => Promise<string | false>;
export declare function fetchJson(url: string): Promise<JsonObject>;
export declare function cacheUrls(urls: string[], cachePath: string): Promise<void>;
