"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const cli_ux_1 = require("cli-ux");
const fs_1 = require("fs");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const utils_1 = require("../../../utils");
async function getDockerContainer(name) {
    const raw = child_process_1.spawnSync(`docker`, [
        'ps',
        '--no-trunc',
        '-f',
        `name=${name}`,
        `--no-trunc`,
        `--format`,
        `{{ json . }}`,
    ]);
    if (raw.stdout) {
        try {
            return JSON.parse(raw.stdout.toString());
        }
        catch (e) { }
    }
}
exports.getDockerContainer = getDockerContainer;
async function getDockerImages() {
    var _a;
    const res = [];
    const raw = child_process_1.spawnSync(`docker`, ['images', `--no-trunc`, `--format`, `{{ json . }}`]);
    if (raw.stdout) {
        const lines = (_a = raw.stdout) === null || _a === void 0 ? void 0 : _a.toString();
        lines === null || lines === void 0 ? void 0 : lines.split('\n').filter((line) => !!line).forEach((line) => {
            try {
                const parsed = JSON.parse(line);
                if (parsed.Repository && parsed.Tag) {
                    res.push(`${parsed.Repository}:${parsed.Tag}`);
                }
            }
            catch (e) { }
        });
    }
    return res;
}
exports.getDockerImages = getDockerImages;
async function sandboxUrlCache(config) {
    var _a, _b, _c, _d;
    const cacheFile = path_1.join(config.config.cacheDir, utils_1.NXPM_SANDBOX_CACHE);
    const urls = [utils_1.NXPM_SANDBOXES_URL];
    if ((_b = (_a = config.userConfig) === null || _a === void 0 ? void 0 : _a.sandbox) === null || _b === void 0 ? void 0 : _b.urls) {
        urls.push(...(_d = (_c = config.userConfig) === null || _c === void 0 ? void 0 : _c.sandbox) === null || _d === void 0 ? void 0 : _d.urls);
    }
    if (!fs_1.existsSync(path_1.join(cacheFile)) || config.refresh) {
        cli_ux_1.cli.action.start(`Downloading sandbox registry from ${urls.length} source(s)`);
        await utils_1.cacheUrls(urls, cacheFile);
        cli_ux_1.cli.action.stop();
    }
}
exports.sandboxUrlCache = sandboxUrlCache;
async function getSandboxUrlCache(config) {
    const cacheFile = path_1.join(config.config.cacheDir, utils_1.NXPM_SANDBOX_CACHE);
    const sandboxGroups = await fs_extra_1.readJSON(cacheFile);
    return Object.values(sandboxGroups).flat();
}
exports.getSandboxUrlCache = getSandboxUrlCache;
async function removeDockerImage(image, force) {
    return utils_1.exec(`docker rmi ${force ? '-f' : ''} ${image}`, { stdio: [] });
}
exports.removeDockerImage = removeDockerImage;
async function pullDockerImage(image) {
    return utils_1.exec(`docker pull ${image}`);
}
exports.pullDockerImage = pullDockerImage;
async function attachDockerImage(image, options) {
    const existing = await getDockerContainer(options.name);
    if (!existing) {
        utils_1.error(`Can't find container ${options.name}`);
        return Promise.reject();
    }
    const cmd = 'docker';
    const action = 'exec';
    const params = ['-it'];
    const command = [cmd, action, params.join(' '), options.name, 'zsh', '&& true'].join(' ');
    utils_1.log('ATTACH', utils_1.gray(command));
    return utils_1.exec(command);
}
exports.attachDockerImage = attachDockerImage;
async function runDockerImage(image, { options }) {
    const existing = await getDockerContainer(options.name);
    if (existing) {
        return attachDockerImage(image, { name: options.name });
    }
    const host = process.env.DOCKER_MACHINE_NAME ? process.env.DOCKER_MACHINE_NAME : 'localhost';
    const cmd = 'docker';
    const action = 'run';
    const ports = options.ports
        .map((p) => (p.includes(':') ? p : `${p}:${p}`))
        .map((p) => {
        utils_1.log('LISTEN', `http://${host}:${p.split(':')[0]}`);
        return p;
    })
        .map((p) => `-p ${p}`)
        .join(' ');
    const defaultParams = [
        '-it',
        '--rm',
        options.name ? `--name ${options.name}` : '',
        options.hostname ? `--hostname ${options.hostname}` : '',
        ports,
    ];
    const params = options.params || [];
    const command = [cmd, action, defaultParams.join(' '), params.join(' '), image, '&& true'].join(' ');
    utils_1.log('RUN', utils_1.gray(command));
    return utils_1.exec(command);
}
exports.runDockerImage = runDockerImage;
