"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const inquirer = require("inquirer");
const path_1 = require("path");
const utils_1 = require("../../utils");
const read_schematic_collections_1 = require("../../utils/vendor/nx-console/read-schematic-collections");
const projects_1 = require("../projects/projects");
const plugin_utils_1 = require("./utils/plugin-utils");
exports.loadPluginsSchematics = async (info, config) => {
    const cacheFile = path_1.join(config.config.cacheDir, utils_1.NXPM_PLUGINS_CACHE);
    const pluginGroups = await fs_extra_1.readJSON(cacheFile);
    const plugins = Object.values(pluginGroups).flat();
    const schematics = await read_schematic_collections_1.readAllSchematicCollections(info.workspaceJsonPath);
    const schematicsNames = schematics.map((s) => s.name);
    const availablePlugins = plugins.filter((p) => !schematicsNames.includes(p.name));
    const installedPlugins = plugins.filter((p) => schematicsNames.includes(p.name));
    const availablePluginNames = availablePlugins.map((p) => p.name);
    const installedPluginNames = installedPlugins.map((p) => p.name);
    return {
        plugins,
        schematics,
        schematicsNames,
        availablePlugins,
        availablePluginNames,
        installedPlugins,
        installedPluginNames,
        pluginNames: [...availablePluginNames, ...installedPluginNames],
    };
};
exports.selectPlugin = async (plugins, message) => {
    const pluginName = await utils_1.selectFromList(plugins, { message, addExit: true });
    if (!pluginName) {
        return false;
    }
    return { pluginName };
};
exports.selectPluginFlow = async (info, config, pluginName) => {
    const { availablePluginNames, installedPluginNames, plugins, schematics, } = await exports.loadPluginsSchematics(info, config);
    const options = [];
    if (!pluginName) {
        console.clear();
        if (availablePluginNames.length !== 0) {
            options.push(new inquirer.Separator('Available Plugins'), ...availablePluginNames.sort());
        }
        if (installedPluginNames.length !== 0) {
            options.push(new inquirer.Separator('Installed Plugins'), ...installedPluginNames.sort());
        }
        const pluginResult = await exports.selectPlugin(options, 'Plugins');
        if (!pluginResult) {
            return Promise.resolve(false);
        }
        pluginName = pluginResult.pluginName;
    }
    const plugin = plugins.find((p) => p.name === pluginName);
    if (!plugin) {
        utils_1.error(`Plugin ${pluginName} not found`);
        return Promise.resolve(false);
    }
    // eslint-disable-next-line no-console
    console.log(`
  ${plugin.description}
  ${utils_1.gray(plugin.url)}
`);
    const isInstalled = installedPluginNames.includes(pluginName);
    const availableOptions = [projects_1.INSTALL_OPTION];
    const installedOptions = [projects_1.REMOVE_OPTION];
    if (isInstalled) {
        const found = schematics.find((s) => s.name === pluginName);
        const schematicNames = found === null || found === void 0 ? void 0 : found.schematics.map((s) => s.name).reverse();
        schematicNames === null || schematicNames === void 0 ? void 0 : schematicNames.forEach((name) => installedOptions.unshift(`${pluginName}:${name}`));
    }
    const selection = await utils_1.selectFromList(isInstalled ? installedOptions : availableOptions, {
        addBack: true,
        addExit: true,
        message: pluginName,
    });
    if (!selection) {
        return Promise.resolve(false);
    }
    return {
        selection,
        pluginName,
        plugin,
    };
};
const loop = async (info, config, { pluginName }) => {
    const result = await exports.selectPluginFlow(info, config, pluginName);
    if (!result) {
        return;
    }
    if (result.selection === projects_1.INSTALL_OPTION) {
        const command = info.packageManager === 'yarn'
            ? `yarn add ${result.pluginName}`
            : `npm install ${result.pluginName}`;
        utils_1.log('Installing plugin');
        utils_1.exec(command, { stdio: 'ignore' });
        console.clear();
        await loop(info, config, { pluginName: result.pluginName });
    }
    if (result.selection === projects_1.REMOVE_OPTION) {
        const command = info.packageManager === 'yarn'
            ? `yarn remove ${result.pluginName}`
            : `npm uninstall ${result.pluginName}`;
        utils_1.log('Removing plugin');
        utils_1.exec(command, { stdio: 'ignore' });
        utils_1.log('Done');
    }
    if (result.selection.startsWith(result.pluginName)) {
        utils_1.log('Running schematic', result.selection);
        const command = `${info.cli} generate ${result.selection}`;
        utils_1.exec(command);
        utils_1.log('Done');
    }
    if (result.selection === projects_1.BACK_OPTION) {
        await loop(info, config, { pluginName });
    }
};
exports.plugins = async (config) => {
    const info = utils_1.getWorkspaceInfo({ cwd: config.cwd });
    await plugin_utils_1.pluginUrlCache(config);
    await loop(info, config, {});
};
