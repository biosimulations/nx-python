"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = require("fs-extra");
const lodash_1 = require("lodash");
const utils_1 = require("../../utils");
const config_utils_1 = require("./utils/config-utils");
function validateOptions(options) {
    if (!options.global) {
        utils_1.error(`The cli currently only supports global variables.`);
        process.exit(1);
    }
}
async function deleteConfig(options) {
    validateOptions(options);
    const configFile = await config_utils_1.getConfigFilePath(options.config);
    await fs_extra_1.unlink(configFile);
    utils_1.log('DELETE', `Deleted ${configFile}`);
}
exports.deleteConfig = deleteConfig;
async function editConfig(options) {
    validateOptions(options);
    const configFile = await config_utils_1.getConfigFilePath(options.config);
    const editor = process.env.EDITOR || 'vim';
    const command = `${editor} ${configFile}`;
    utils_1.exec(command);
}
exports.editConfig = editConfig;
async function getConfigParam(options) {
    validateOptions(options);
    const configFile = await config_utils_1.getConfigFile(options.config);
    const keyExists = lodash_1.has(configFile, options.key);
    if (!keyExists) {
        utils_1.warning(`Option ${options.key} is not set`);
        process.exit();
    }
    console.log(JSON.stringify(lodash_1.get(configFile, options.key), null, 2));
}
exports.getConfigParam = getConfigParam;
async function setConfigParam(options) {
    validateOptions(options);
    const configFile = await config_utils_1.getConfigFile(options.config);
    const keyExists = lodash_1.has(configFile, options.key);
    if (keyExists && lodash_1.get(configFile, options.key) === options.value) {
        utils_1.warning(`Option ${options.key} is already set to ${options.value}`);
        process.exit();
    }
    const updated = lodash_1.set(configFile, options.key, options.value);
    await config_utils_1.updateConfigFile(options.config, updated);
    utils_1.log(keyExists ? 'UPDATE' : 'CREATE', `Set option ${options.key} to ${options.value}`);
}
exports.setConfigParam = setConfigParam;
