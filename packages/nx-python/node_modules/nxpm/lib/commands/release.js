"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const command_1 = require("@oclif/command");
const inquirer = require("inquirer");
const release_1 = require("../lib/release/release");
const utils_1 = require("../utils");
const parse_version_1 = require("../utils/parse-version");
class Release extends utils_1.BaseCommand {
    async run() {
        var _a, _b, _c, _d, _e, _f;
        const { args, flags } = this.parse(Release);
        if (!args.version) {
            const response = await inquirer.prompt([
                {
                    name: 'version',
                    type: 'input',
                    message: 'What version do you want to release?',
                    validate(version) {
                        if (!parse_version_1.parseVersion(version).isValid) {
                            return 'Please use a valid semver version (eg: 1.2.3-beta.4)';
                        }
                        return true;
                    },
                },
            ]);
            args.version = response.version;
        }
        if ((_c = (_b = (_a = this.userConfig) === null || _a === void 0 ? void 0 : _a.release) === null || _b === void 0 ? void 0 : _b.github) === null || _c === void 0 ? void 0 : _c.token) {
            utils_1.log('GITHUB_TOKEN', 'Using token from config file');
            process.env.GITHUB_TOKEN = (_f = (_e = (_d = this.userConfig) === null || _d === void 0 ? void 0 : _d.release) === null || _e === void 0 ? void 0 : _e.github) === null || _f === void 0 ? void 0 : _f.token;
        }
        await release_1.release({
            allowIvy: flags['allow-ivy'],
            build: flags.build,
            ci: flags.ci,
            config: this.config,
            cwd: flags.cwd,
            dryRun: flags['dry-run'],
            fix: flags.fix,
            version: args.version,
            local: flags.local,
            localUrl: flags.localUrl,
        });
    }
}
exports.default = Release;
Release.description = 'Release publishable packages in an Nx Workspace';
Release.flags = {
    build: command_1.flags.boolean({ char: 'b', description: 'Build libraries after versioning' }),
    ci: command_1.flags.boolean({
        description: 'CI mode (fully automatic release)',
        default: false,
    }),
    cwd: command_1.flags.string({
        char: 'c',
        description: 'Current working directory',
        default: process.cwd(),
    }),
    'dry-run': command_1.flags.boolean({ char: 'd', description: "Dry run, don't make permanent changes" }),
    help: command_1.flags.help({ char: 'h' }),
    'allow-ivy': command_1.flags.boolean({
        char: 'i',
        description: 'Allow publishing Angular packages built for Ivy',
        default: true,
    }),
    fix: command_1.flags.boolean({ char: 'f', description: 'Automatically fix known issues' }),
    local: command_1.flags.boolean({
        description: 'Release package to local registry',
        default: false,
    }),
    localUrl: command_1.flags.string({
        description: 'URL to local registry',
        default: 'http://localhost:4873/',
    }),
};
Release.args = [
    {
        name: 'version',
        description: 'The version you want to release in semver format (eg: 1.2.3-beta.4)',
        required: false,
    },
];
